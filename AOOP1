//Write a Java program to generate and handle any three built in exceptions and display appropriate error messages. 

package AOOP;
import java.util.Scanner;

public class Exception1 {
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        System.out.println("Enter 2 numbers ");
        division();
    }

    static void division()
    {
        Scanner in=new Scanner(System.in);
        try {
            int num1=in.nextInt();
            int num2=in.nextInt();
            int result = num1 / num2;
            System.out.println(result);
        }
        catch (ArithmeticException e)
        {
            System.out.println("You Cannot divide a number by 0");
        }
    }
}
package AOOP;

import java.lang.NullPointerException;

public class Exception2 {
    public static void main(String[] args) {

        try {
            String input=null;
            System.out.println(input.length());
        }
        catch (NullPointerException e)
        {
            System.out.println("String Input Cannot be Null");
        }
    }
}
package AOOP;

public class Exception3 {
    public static void main(String[] args) {

        try {
            int[] array = {1, 2, 3, 4, 5};
            // given length was 4 (as array index starts from 0)
            for (int i = 0; i < array.length; i++) {
                System.out.println(array[5]);
            }
        }
        //throws exception because cannot access out of range element
        catch (ArrayIndexOutOfBoundsException e)
        {
            System.out.println("index is not present in the array");
        }
    }
}



//Write a Java program to read an integer and check whether the number is prime
or not. If negative number is entered, throw an exception NegativeNumberNotAllowedException and if entered number is not prime, then
throw NumberNotPrimeException. 

import java.util.Scanner;
import java.io.*;
class notPrime extends Exception{
public String toString(){
return "Not a Positive number";
}
}
class checkPrime{
public static void main(String[] args){
Scanner sc=new Scanner(System.in);
System.out.println("enter a number");
int n=sc.nextInt();
try{ 
if(n>0){
for(int i=2;i<=n/2;i++){
if(n%i==0){
System.out.println(n+" is not a primnumber");
}
else{
System.out.println(n+" is a prime number");
}
}
}
else{
throw new notPrime();
}
}catch(notPrime np){
System.out.println(np.toString());
}

}
} 


//Write a Java program to perform the following operations: 
a)Read a line of text
b) Search for a sub-string SDMCET (case insensitive search)
c) If found, then print success message
d) Otherwise throw an exception SubStringNotFoundException with
appropriate message

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
public class SubString {
public static void main(String args[]) throws IOException {
//File f=new File("sdmcet.txt");
FileReader f=new FileReader("Sdmcet.txt");
BufferedReader br= new BufferedReader(f);
String s1="SDMCET";
String s2="";
while((s2=br.readLine())!=null) {
try {
if(s2.contains(s1)) {
System.out.println("SDMCET string found succesfully at
position:"+s2.indexOf(s1) );
}
else
throw new StringNotFoundException("String not found");
}catch(StringNotFoundException se) {
se.printStackTrace();
}
}



}
} 

class StringNotFoundException extends Exception{
private String se;
StringNotFoundException(String s){
this.se=s;
} 


//Write a Java program to perform the following operations:
a) Create a file named Alphabets.txt and insert appropriate data into it
b) Read the file and copy all the consonants into another file named
Consonants.txt
c) If vowel is encountered, throw an exception
VowelNotAllowedException and continue until end of
file 

import java.util.*;
import java.io.*;
class Assignment4 {
public static void main(string[] args){
try{
FileInputStream fin=new
FileInputStream("C:\Users\ABHISHEK KUPPELUR\Documents\4th sem\Alphabet.txt");
FileOutputStream fout=new
FileOutputStream("C:\Users\PABHISHEK KUPPELUR\Documents\4th sem\consonant.txt");
int ch;
while(ch=fin.read()!=-1){
if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'){
throw new vowelNotAllowedException();
}
else
fout.write(ch);
}
}catch(vowelNotAllowedException e){
System.out.println(e.toString());
} 
}
}
class vowelNotAllowedException extends Exception{



public String toString(){
return "vowels are not allowed";
}
} 


//Write a Java program to implement the following scenario:
a) Create a file named Integers.txt and insert n-random integers into it
b) Create three threads T1, T2 and T3 that read n/3 integers in sequence of occurrence of numbers from the file and sort the read n/3 integers
c) Thread T4 waits for all the threads T1, T2 and T3 to complete sorting, then sorts and outputs the entire list of sorted numbers to another file named SortedIntegers.txt

import java.util.*;
import java.util.Scanner;
import java.io.*;


public class Assignment_5 {
    
  public static void main(String[] args) {
    try{
    FileWriter w = new FileWriter("Integer.txt"); 
    Scanner sc= new Scanner(System.in);
 
 
    System.out.println("Enter the value of n Integer to write on a file :");
    int n = sc.nextInt();
    for (int i = 0; i < n; i++) {
        System.out.print("Enter the " + (i + 1) +  "to write :" );
        int input = sc.nextInt();
        w.write(input + "\t");
  }w.close();
  int i=0;
  int arr[] = new int[n];
 File file = new File("Integer.txt");
 Scanner read = new Scanner(file);


 while(read.hasNext()){
 arr[i++] = Integer.valueOf(read.next()); 
 }


 Thread t1= new Thread(){
  
    public void run(){
      Arrays.sort(arr, 0, (arr.length/3));
      for (int j = 0; j < (arr.length/3); j++) {
        System.out.println(arr[j]);
      }
      
    }

 };
 Thread t2= new Thread(){
   
   public void run(){
     Arrays.sort(arr, (arr.length/3), (2*(arr.length/3)));
     for (int j =  (arr.length/3); j < (2*(arr.length/3)); j++) {
       System.out.println(arr[j]);
      }
    }
    
  };
  Thread t3= new Thread(){
    
    public void run(){
      Arrays.sort(arr,  (2*(arr.length/3)),(n-1));
      for (int j = (2*(arr.length/3)); j < n; j++) {
        System.out.println(arr[j]);
      }
      
    }
    
  };
  Thread t4= new Thread(){
    
    

public void run(){
Arrays.sort(arr);
      // Arrays.sort(arr,  0,n);

      StringBuilder s = new StringBuilder();
      try{
      FileWriter write  =new FileWriter("SortedInteger.txt"); 
      System.out.println("t4 is printing");
      for (int j = 0; j < n; j++) {
      
        s.append(String.valueOf(arr[j]) + "\t");
      
      }
      write.write(s.toString());
      write.close();
    }catch (Exception e){
      System.out.println(e);
    }      
    }
    
  };
  t1.start();
  t1.join();
  t2.start();
  t2.join();
  t3.start();
  t3.join();
  t4.start();

 }catch(Exception e){
        System.out.println(e);
    }
  }

}
